#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

#define BASE 0
#define RAISE 1
#define LOWER 2
#define NUM 3
#define FUN 4
#define SETTING 5

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    num_word {
      bindings = <&num_word>;
      key-positions = <29 30>;
    };

    to_base {
      bindings = <&to 0>;
      key-positions = <38 39>;
    };
  };

  macros {
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: hml {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HML";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <280>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      flavor = "balanced";
      hold-trigger-on-release;
      require-prior-idle-ms = <150>;
      quick-tap-ms = <175>;
    };

    hmr: hmr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HMR";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <280>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <150>;
      flavor = "balanced";
      hold-trigger-on-release;
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };

    cmd_alt: cmd_alt {
      compatible = "zmk,behavior-tap-dance";
      label = "CMD_ALT";
      #binding-cells = <0>;
      bindings = <&sk LCMD>, <&sk LALT>, <&sk LA(LEFT_GUI)>;
    };

    CS4_CGQ: CS4_CGQ {
      compatible = "zmk,behavior-tap-dance";
      label = "CS4_CGQ";
      #binding-cells = <0>;
      bindings = <&kp LS(LG(N4))>, <&kp LC(LG(Q))>;
    };

    fun_lalt_tp: fun_lalt_tp {
      compatible = "zmk,behavior-tap-dance";
      label = "FUN_LALT_TP";
      #binding-cells = <0>;
      bindings = <&sl 3>, <&sk LALT>;
    };

    mwh: behavior_mouse_scroll {
      compatible = "zmk,behavior-mouse-scroll";
      label = "MOUSE_SCROLL";
      #binding-cells = <1>;
      delay-ms = <0>;
      time-to-max-speed-ms = <10>;
      acceleration-exponent = <500>;
    };

    scroll_ht: scroll_ht {
      compatible = "zmk,behavior-hold-tap";
      label = "SCROLL_HT";
      bindings = <&mwh>, <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <150>;
      flavor = "tap-preferred";
    };

    num_word: behavior_num_word {
      compatible = "zmk,behavior-caps-word";
      label = "NUM_WORD";
      #binding-cells = <0>;
      layers = <NUM>;                                // insert location of numbers layer here
      continue-list = <BACKSPACE DELETE DOT COMMA QUESTION UNDERSCORE PLUS MINUS SLASH ASTERISK LEFT_SHIFT RIGHT_SHIFT EQUAL>;  // adjust as desired
      ignore-numbers;                                // numbers don't deactivate the layer
    };

    num_word_kp: num_word_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "NUM_WORD_KP";
      bindings = <&num_word>, <&kp>;

      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
    };

    f5_tab: f5_tab {
      compatible = "zmk,behavior-mod-morph";
      label = "F5_TAB";
      bindings = <&kp F5>, <&kp TAB>;

      #binding-cells = <0>;
      mods = <(MOD_LGUI|MOD_RALT|MOD_RGUI)>;
      keep-mods = <(MOD_RGUI)>;
    };

    sk_sl: sk_sl {
      compatible = "zmk,behavior-hold-tap";
      label = "SK_SL";
      bindings = <&sk>, <&sl>;

      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <150>;
      flavor = "balanced";
      hold-trigger-on-release;
    };

    kp_to: kp_to {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_TO";
      bindings = <&kp>, <&to>;

      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <(-1)>;
      require-prior-idle-ms = <0>;
      flavor = "balanced";
      hold-trigger-on-release;
    };

    enter_l2: enter_l2 {
      compatible = "zmk,behavior-tap-dance";
      label = "ENTER_L2";
      #binding-cells = <0>;
      bindings = <&fast_lt 2 ENTER>, <&kp ENTER>, <&to 2>;

      tapping-term-ms = <280>;
    };

    enter_l3: enter_l3 {
      compatible = "zmk,behavior-tap-dance";
      label = "ENTER_L3";
      #binding-cells = <0>;
      bindings = <&fast_lt 0 ENTER>, <&kp ENTER>, <&to 0>;

      tapping-term-ms = <280>;
    };

    fast_lt: fast_lt {
      compatible = "zmk,behavior-hold-tap";
      label = "FAST_LT";
      bindings = <&mo>, <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "balanced";
    };

    n_f1: n_f1 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F1";
      bindings = <&kp EXCLAMATION>, <&kp F1>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f2: n_f2 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F2";
      bindings = <&kp AT_SIGN>, <&kp F2>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f3: n_f3 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F3";
      bindings = <&kp HASH>, <&kp F3>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f4: n_f4 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F4";
      bindings = <&kp DOLLAR>, <&kp F4>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f5: n_f5 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F5";
      bindings = <&kp PERCENT>, <&kp F5>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f6: n_f6 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F6";
      bindings = <&kp CARET>, <&kp F6>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f7: n_f7 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F7";
      bindings = <&kp AMPERSAND>, <&kp F7>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f8: n_f8 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F8";
      bindings = <&kp ASTERISK>, <&kp F8>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f9: n_f9 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F9";
      bindings = <&kp LEFT_PARENTHESIS>, <&kp F9>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f10: n_f10 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F10";
      bindings = <&kp RIGHT_PARENTHESIS>, <&kp F10>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f11: n_f11 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F11";
      bindings = <&kp N1>, <&kp F11>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n_f12: n_f12 {
      compatible = "zmk,behavior-mod-morph";
      label = "N_F12";
      bindings = <&kp N2>, <&kp F12>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    setting {
      if-layers = <1 2>;
      then-layer = <4>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB               &kp Q  &kp W  &kp E         &kp R           &kp T          &kp Y             &kp U        &kp I      &kp O    &kp P     &kp BACKSPACE
        &mt LEFT_CONTROL ESC  &kp A  &kp S  &kp D         &kp F           &kp G          &kp H             &kp J        &kp K      &kp L    &kp SEMI  &mt RIGHT_CONTROL SQT
        &kp LEFT_SHIFT        &kp Z  &kp X  &kp C         &kp V           &kp B          &kp N             &kp M        &kp COMMA  &kp DOT  &kp FSLH  &mt RSHIFT ENTER
                                            &kp LEFT_ALT  &mt LCMD SPACE  &lt 2 SPACE    &mt RSHIFT ENTER  &lt 1 SPACE  &kp RCMD
      >;
    };

    raise {
      bindings = <
        &trans  &kp N1           &kp N2        &kp N3                &kp N4                 &kp N5                  &kp N6     &kp N7     &kp N8     &kp N9     &kp N0         &trans
        &trans  &kp EXCLAMATION  &kp QUESTION  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans                  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp BACKSPACE  &trans
        &trans  &trans           &trans        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans                  &kp GRAVE  &kp EQUAL  &kp MINUS  &trans     &kp BSLH       &trans
                                               &trans                &mo 3                  &mt LEFT_SHIFT SPACE    &trans     &trans     &trans
      >;

      label = "raise";
    };

    lower {
      bindings = <
        &kp LC(LG(Q))         &trans                &kp LS(LG(LEFT_BRACKET))  &mwh SCROLL_UP     &kp LS(LG(RIGHT_BRACKET))  &trans           &trans  &trans  &trans  &trans  &trans  &trans
        &trans                &kp LG(LEFT_BRACKET)  &mwh SCROLL_LEFT          &mwh SCROLL_DOWN   &mwh SCROLL_RIGHT          &kp ENTER        &trans  &trans  &trans  &trans  &trans  &trans
        &kp LS(LG(NUMBER_4))  &trans                &kp C_MUTE                &kp C_VOLUME_DOWN  &kp C_VOLUME_UP            &kp LC(ENTER)    &trans  &trans  &trans  &trans  &trans  &trans
                                                                              &trans             &trans                     &trans           &trans  &trans  &trans
      >;

      label = "lower";
    };

    fun {
      bindings = <
        &trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &kp F12
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    setting {
      bindings = <
        &bt BT_CLR            &bt BT_SEL 0          &bt BT_SEL 1                       &bt BT_SEL 2                            &bt BT_SEL 3  &bt BT_SEL 4          &trans  &trans  &trans  &trans  &trans  &trans
         &trans                &trans                &trans                             &trans                                  &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans                &trans                &trans                             &trans                                  &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                                                       &trans                                  &trans        &trans          &trans  &trans  &trans
      >;
    };
  };
};
